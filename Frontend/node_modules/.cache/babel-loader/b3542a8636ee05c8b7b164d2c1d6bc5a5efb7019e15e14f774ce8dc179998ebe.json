{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\gerenciador_Eventos\\\\Frontend\\\\src\\\\pages\\\\authContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isAdmin, setIsAdmin] = useState(false);\n  useEffect(() => {\n    // Check if there's a token in localStorage on mount and update the state accordingly\n    const token = localStorage.getItem('token');\n    if (token) {\n      // Ideally, verify the token here (e.g., by making an API call)\n      // For now, we'll assume that having a token means the user is authenticated\n      setIsAuthenticated(true);\n      const userType = localStorage.getItem('userType');\n      setIsAdmin(userType === 'admin');\n    }\n  }, []);\n  const login = isAdmin => {\n    setIsAuthenticated(true);\n    setIsAdmin(isAdmin);\n  };\n  const logout = () => {\n    setIsAuthenticated(false);\n    setIsAdmin(false);\n    localStorage.removeItem('token');\n    localStorage.removeItem('userType');\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      isAdmin,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"wqYoM5Zkli0xb0Rjmti0YIIgN1M=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","isAuthenticated","setIsAuthenticated","isAdmin","setIsAdmin","token","localStorage","getItem","userType","login","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/gerenciador_Eventos/Frontend/src/pages/authContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Check if there's a token in localStorage on mount and update the state accordingly\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      // Ideally, verify the token here (e.g., by making an API call)\r\n      // For now, we'll assume that having a token means the user is authenticated\r\n      setIsAuthenticated(true);\r\n      const userType = localStorage.getItem('userType');\r\n      setIsAdmin(userType === 'admin');\r\n    }\r\n  }, []);\r\n\r\n  const login = (isAdmin) => {\r\n    setIsAuthenticated(true);\r\n    setIsAdmin(isAdmin);\r\n  };\r\n\r\n  const logout = () => {\r\n    setIsAuthenticated(false);\r\n    setIsAdmin(false);\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('userType');\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ isAuthenticated, isAdmin, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElE,OAAO,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMM,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAE7CC,SAAS,CAAC,MAAM;IACd;IACA,MAAMW,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIF,KAAK,EAAE;MACT;MACA;MACAH,kBAAkB,CAAC,IAAI,CAAC;MACxB,MAAMM,QAAQ,GAAGF,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;MACjDH,UAAU,CAACI,QAAQ,KAAK,OAAO,CAAC;IAClC;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,KAAK,GAAIN,OAAO,IAAK;IACzBD,kBAAkB,CAAC,IAAI,CAAC;IACxBE,UAAU,CAACD,OAAO,CAAC;EACrB,CAAC;EAED,MAAMO,MAAM,GAAGA,CAAA,KAAM;IACnBR,kBAAkB,CAAC,KAAK,CAAC;IACzBE,UAAU,CAAC,KAAK,CAAC;IACjBE,YAAY,CAACK,UAAU,CAAC,OAAO,CAAC;IAChCL,YAAY,CAACK,UAAU,CAAC,UAAU,CAAC;EACrC,CAAC;EAED,oBACEf,OAAA,CAACC,WAAW,CAACe,QAAQ;IAACC,KAAK,EAAE;MAAEZ,eAAe;MAAEE,OAAO;MAAEM,KAAK;MAAEC;IAAO,CAAE;IAAAX,QAAA,EACtEA;EAAQ;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACjB,EAAA,CAjCWF,YAAY;AAAAoB,EAAA,GAAZpB,YAAY;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}